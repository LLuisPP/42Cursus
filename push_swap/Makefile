# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: user <user@student.42.fr>                  +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2023/11/28 16:34:33 by lprieto-          #+#    #+#              #
#    Updated: 2023/12/04 19:55:55 by user             ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

# -------- NOMBRE
NAME = PUSH_SWAP

CC = gcc
CFLAGS = -Wall -Wextra -Werror
AR = ar -rcs
RM = rm -rf

SRCS = push_swap.c ps_checkers.c ps_utils.c ps_stacks.c 

SRC_PATH = ./src/
OBJ_PATH = ./tmp/
H_PATH = ./hincludes
HEADERS = -I$(H_PATH)
DIRSRC = $(addprefix $(SRC_PATH), $(SRCS))
OBJS = $(addprefix $(OBJ_PATH), $(SRCS:.c=.o))

all: makelib $(OBJ_PATH) $(NAME)

makelib: 
	$(MAKE) --silent -C libft  --no-print-directory

$(OBJ_PATH):
	mkdir -p $(OBJ_PATH)

$(NAME): $(OBJS)
	$(call show_progress)
	$(CC) $(OBJS) libft/libft.a -o $(NAME)
	echo

$(OBJ_PATH)%.o: $(SRC_PATH)%.c Makefile
	mkdir -p $(dir $@)
	$(CC) $(CFLAGS) $(HEADERS) -c $< -o $@

clean :
	$(call progress_remove)
	$(RM) $(OBJ_PATH)
	$(MAKE) --silent -C libft clean

fclean :
	$(RM) $(NAME) $(OBJ_PATH)
	$(MAKE) --silent -C libft fclean
# --silent a la linea de $MAKE #

re :
	$(RM) $(NAME) $(OBJS)
	make all

.PHONY: all, clean, fclean, re

.SILENT:

#========================================================================#

BGRA =	\033[1;90m
BR = \033[1;91m
BG = \033[1;92m
BY = \033[1;93m
BB = \033[1;94m
BC = \033[1;96m
BW = \033[1;97m
GRA =	\033[0;90m
O = \033[0;33m
P = \033[1;35m
R = \033[0;91m
G = \033[0;92m
Y = \033[0;93m
B = \033[0;94m
C = \033[0;96m
W = \033[0;97m

# **************************************************************************** #

COUNT_SRCS := $(words $(SRCS))
COUNT_OBJS := $(words $(OBJS))
BAR_LEN := 40

# **************************************************************************** #


define show_progress
	echo; \
	printf " eeeee e   e eeeee e   e       eeeee e   e  e eeeee eeeee \n \
8   8 8   8 8   8 8   8       8   8 8   8  8 8   8 8   8 \n \
8eee8 8e  8 8eeee 8eee8       8eeee 8e  8  8 8eee8 8eee8 \n \
88    88  8    88 88  8          88 88  8  8 88  8 88    \n \
88    88ee8 8ee88 88  8       8ee88 88ee8ee8 88  8 88    \n \
.                       eeeee\n\n"; \
	((i = 0)); \
	while [[ $$i -le $(COUNT_SRCS) ]] ; do \
		printf "$(BB)["; \
		progress=$$((i * $(BAR_LEN) / $(COUNT_SRCS))); \
		((j = 1));\
		while [[ $$j -le $(BAR_LEN) ]]; do \
			if [[ $$j -le $$progress ]]; then \
				printf "$(BG)▒"; \
			else \
				printf "$(GRA)░"; \
			fi; \
			((j = j + 1)); \
		done; \
		printf "$(BB)] [$(C)$$i/$(COUNT_SRCS)$(BB)] \
		[$(BW)$$((i * 100 / $(COUNT_SRCS)))%%$(BB)]$(W)\r"; \
		((i = i + 1)); \
		sleep 0.10; \
	done; \
	echo; \
	printf "\n\n $(BB)╔═════════════╦═════════  ════════╦══════════════╗ \n \
	║$(W) • • • • • ● $(BB)║$(W) • P $(P)ᗣ $(Y)ᗧ$(W) - M $(G)ᗣ$(W) N • $(BB)║$(W) • • • 🍊 • • $(BB)║ \n \
║$(W) • $(BB)╔═════╗$(W) • $(BB)║$(W)  $(W)▒▒▒▒▒▒▒▒▒$(BB)╗$(W) • ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ • $(BB)║\n \
$(BB)║$(W) • $(BB)║$(W)🍒42 $(BB)║$(W) •  ▒▒▒▒▒▒▒▒▒• $(BB)║$(W) • ▒▒▒▒▒▒▒ $(BB)╔$(W)▒▒▒▒▒▒▒ • $(BB)║\n \
$(W)  • $(BB)║$(W) BCN $(BB)║$(W)  ▒▒▒▒▒▒▒▒▒$(BB)════╝$(W) • ▒▒▒▒    $(BB)╚$(W)▒▒▒▒▒▒▒ • \n \
$(BB)║$(W) • $(BB)╚═════╝$(W)▒▒▒▒▒▒▒▒▒  • • • • ▒▒• • • ▒▒▒▒▒▒▒  • $(BB)║\n \
$(BB)║$(W) • • •  ▒▒▒▒▒▒▒▒▒ $(BB)╔════  ════╗$(W) • $(BB)╔═$(W)▒▒▒▒▒▒▒▒$(BB)═╗$(W) • $(BB)║\n \
$(BB)║$(W) 🍊 $(BB)╔═$(W)▒▒▒▒▒▒▒▒▒ • $(BB)║$(W) $(W)$$(whoami) $(BB)║$(W) • ▒▒▒▒▒▒▒▒ $(C)ᗣ$(W) $(BB)║$(W) • $(BB)║\n \
$(BB)║$(W) •  ▒▒▒▒▒▒▒▒▒$(BB)═╝$(W) • $(BB)╚══════════╝$(W) ▒▒▒▒▒▒▒▒$(BB)═════╝$(W) • $(BB)║\n \
$(BB)║$(W) • ▒▒▒▒▒▒▒▒ • • • • ● • • •   ▒▒▒▒▒▒▒ • • •▒▒ • $(BB)║\n \
$(BB)║$(W) • ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ • ▒▒▒▒▒▒▒• $(BB)╔══$(W)▒▒▒▒ • $(BB)║\n \
$(BB)║$(W) • ▒▒▒▒▒▒ Barcelona ▒▒▒▒▒▒ • ▒▒▒▒▒▒▒• $(BB)║$(W)▒▒▒▒▒▒ • $(BB)║\n \
$(BB)║$(W) • ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ • ▒▒▒▒▒▒▒• ▒▒▒▒▒▒▒ ● $(BB)║\n \
$(BB)║$(W) • • • • • • • •  ▒▒▒▒▒▒▒▒ ● ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ • $(BB)║\n \
$(BB)║$(C) ᗣ$(W) $(BB)╔═$(W) $(R)░░░░░$(W)• $(BB)╔══╗$(W) $(W)▒▒▒▒▒▒▒▒ • • • |  • • • • • • $(BB)║\n \
$(W)  • $(BB)║$(W) $(R)░$(W)▄ $(R)░$(W)▄ $(R)░ $(BB)╚══╝$(W) $(W)▒▒▒▒▒▒▒▒ • $(BB)╔══$(W) ╰➤$(G) $(NAME)$(W) •\n \
$(BB)║$(W) • $(BB)║$(W) $(R)░░░░░░░$(W) • •  $(W)▒▒▒▒▒▒▒▒ • $(BB)║$(W) • • • $(BB)╔══════╗$(W) • $(BB)║\n \
$(BB)║$(W) • $(BB)╚$(R) ░ ░ ░ ░ $(BB)║$(W) 🍏 $(W)▒▒▒▒▒▒▒▒ $(BB)══╝$(W) • $(BB)║$(W) • $(BB)╚══════╝$(W) • $(BB)║\n \
$(BB)║$(W) • • ● • • • $(BB)║$(W) • • • • $(R)ᗣ$(W) • • • • $(BB)║$(W) ● • • • • 🍓 $(BB)║ \n \
╚═════════════╩═════════  ════════╩══════════════╝ \n";
endef
